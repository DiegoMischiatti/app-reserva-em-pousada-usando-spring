package br.edu.infnet.apppousada.controller;

import java.util.HashMap;

import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.edu.infnet.apppousada.exception.ResourceNotFoundException;
import br.edu.infnet.apppousada.model.Reserva;
import br.edu.infnet.apppousada.service.ReservaService;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/v1")
public class ReservaController {
	@Autowired
	private ReservaService reservaService;

	@GetMapping("/reservas")
	public List<Reserva> getAllreservas() {
		return reservaService.lista();
	}

	@GetMapping("/reservas/{id}")
	public ResponseEntity<Reserva> getreservaById(@PathVariable(value = "id") Integer reservaId)
			throws ResourceNotFoundException {
		Reserva reserva = reservaService.listaId(reservaId);
		return ResponseEntity.ok().body(reserva);
	}

	@PostMapping("/reservas")
	public Reserva createreserva(@Valid @RequestBody Reserva reserva) throws Exception {
		return reservaService.inserir(reserva);
	}

	@PutMapping("/reservas/{id}")
	public ResponseEntity<Reserva> updatereserva(@PathVariable(value = "id") Integer reservaId,
			@Valid @RequestBody Reserva reservaDetails) throws ResourceNotFoundException {

		final Reserva updatereserva = reservaService.alterar(reservaId, reservaDetails);
		return ResponseEntity.ok(updatereserva);
	}
	
	@PutMapping("/reservas/{id}/finalizar")
	public ResponseEntity<T> finalizarReserva(@PathVariable(value = "id") Integer reservaId) throws ResourceNotFoundException {

		reservaService.finalizaReserva(reservaId);
		return ResponseEntity.ok();
	}

	@DeleteMapping("/reservas/{id}")
	public Map<String, Boolean> deletereserva(@PathVariable(value = "id") Integer reservaId)
			throws ResourceNotFoundException {

		reservaService.excluir(reservaId);
		Map<String, Boolean> response = new HashMap<>();
		response.put("deleted", Boolean.TRUE);
		return response;
	}
}
