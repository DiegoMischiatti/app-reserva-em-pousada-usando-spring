package br.edu.infnet.apppousada.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.edu.infnet.apppousada.exception.ResourceNotFoundException;
import br.edu.infnet.apppousada.model.Hospede;
import br.edu.infnet.apppousada.repository.HospedeRepository;

@Service
public class QuartoService {
	@Autowired
	private HospedeRepository hospedeRepository;

	
	public List<Hospede> lista() {
		return hospedeRepository.findAll();
	}

	
	public Hospede listaId(Integer hospedeId)
			throws ResourceNotFoundException {
		Hospede hospede = hospedeRepository.findById(hospedeId)
				.orElseThrow(() -> new ResourceNotFoundException("hospede com id nao existente::: " + hospedeId));
		return hospede;
	}

	
	public Hospede inserir(Hospede hospede) {
		return hospedeRepository.save(hospede);
	}

	
	public Hospede alterar( Integer hospedeId,
			                                Hospede hospedeDetails) throws ResourceNotFoundException {
		Hospede hospede = hospedeRepository.findById(hospedeId)
				.orElseThrow(() -> new ResourceNotFoundException("hospede com id nao existente::: " + hospedeId));

		hospede.setNome(hospedeDetails.getNome());
		hospede.setCpf(hospedeDetails.getCpf());
		hospede.setSexo(hospedeDetails.getSexo());
		hospede.setEmail(hospedeDetails.getEmail());
		final Hospede updatehospede = hospedeRepository.save(hospede);
		return updatehospede;
	}

	
	public Map<String, Boolean> excluir( Integer hospedeId)
			throws ResourceNotFoundException {
		Hospede hospede = hospedeRepository.findById(hospedeId)
				.orElseThrow(() -> new ResourceNotFoundException("hospede com id nao existente::: " + hospedeId));

		hospedeRepository.delete(hospede);
		Map<String, Boolean> response = new HashMap<>();
		response.put("deleted", Boolean.TRUE);
		return response;
	}
}
